## names, and math, Japanese and dance grades
grades <- data.frame(names, math, japanese, dance)
grades
## Compute number of courses in data--
## number columns in your data minus one
## (b/c of their names)
length(grades[1,])
## Compute number of courses in data--
## number columns in your data minus one
## (b/c of their names)
length(grades[1,]) - 1
grades[1,]
## Print the last two lines of your data
# [[]] gives you the data within a COLUMN.
tails(grades, 2)
## Print the last two lines of your data
# [[]] gives you the data within a COLUMN.
library(stringr)
tails(grades, 2)
tail(grades, 2)
grades[1,]
grades[[1,]]
## Compute GPA (math + Japanese + dance)/3 for each student
## Use vectorized operations, not loops!
## Save it as variable 'gpa' in your data frame.
grades[["gpa"]] <- (grades$math + grades$japanese + grades$dance)/3
grades
## Who has the best GPA?  Print that line of your data!
max(grades$gpa)
## Who has the best GPA?  Print that line of your data!
cat(grades[grades$max(grades$gpa)])
grades[62]
grades[grades$62]
grades[grades$"62"]
grades[grades$gpa(62)]
## Who has the best GPA?  Print that line of your data!
cat(grades[grades$(max(grades$gpa)])
## Who has the best GPA?  Print that line of your data!
cat(grades[grades$(max(grades$gpa)]))
## Who has the best GPA?  Print that line of your data!
cat(grades[grades$(max(grades$gpa)]))
grades$gpa(62)
## Who has the best GPA?  Print that line of your data!
grades[grades$gpa == max(grades$gpa)]
grades
## Who has the best GPA?  Print that line of your data!
grades[grades$gpa == 62]
## Who has the best GPA?  Print that line of your data!
grades[grades$gpa == 62]
grades
## Who has the best GPA?  Print that line of your data!
grades[grades$gpa == 62,]
## Who has the best GPA?  Print that line of your data!
grades[grades$gpa == 62,]
## Who has the best GPA?  Print that line of your data!
grades[grades$gpa == max(grades$gpa),]
## Now print only the best student's name
grades[grades$gpa == max(grades$gpa), 1]
## Now print your data.  Did you get the name right?
grades
## Compute variable that is TRUE/FALSE,
## depending on if the student better at math than in Japanese
## Pick a suitable variable name yourself.
## Show three lines of your data that includes the new variable.
grades[["better_at_foreign_language"]] <- grades$japanese > grades$math
tail(grades, 3)
## How many students are there in your data who are better at math
## than in Japanese?
length(grades$better_at_foreign_language == "T")
## How many students are there in your data who are better at math
## than in Japanese?
length(grades[grades$better_at_foreign_language == "T"])
## How many students are there in your data who are better at math
## than in Japanese?
length(grades[grades$better_at_foreign_language == "T",])
## How many students are there in your data who are better at math
## than in Japanese?
grades$better_at_foreign_language == "T"
## How many students are there in your data who are better at math
## than in Japanese?
grades$better_at_foreign_language == "TRUE"
grades
## How many students are there in your data who are better at math
## than in Japanese?
length(grades$better_at_foreign_language == "TRUE")
## How many students are there in your data who are better at math
## than in Japanese?
length(grades$better_at_foreign_language == "TRUE",)
## How many students are there in your data who are better at math
## than in Japanese?
length(grades[grades$better_at_foreign_language == "TRUE",])
## How many students are there in your data who are better at math
## than in Japanese?
length(grades[grades$better_at_foreign_language == TRUE])
## How many students are there in your data who are better at math
## than in Japanese?
grades
sum(grades$better_at_foreign_language)
length(grades[grades$better_at_foreign_language])
length(grades[grades$better_at_foreign_language == FALSE])
## How many students are there in your data who are better at math
## than in Japanese?
length(grades[grades$better_at_foreign_language == FALSE])
grades$names
grades[,"names"]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
diamonds %>%
dim()
ggplot(diamonds)
diamonds %>%
sample_n(10)
d1000 <- diamonds %>%
sample_n(1000)
ggplot(d1000) %>%
geom_point(aes(x = carat, y = price))
ggplot(d1000) +
geom_point(aes(x = carat, y = price))
ggplot(diamonds) +
geom_point(aes(x = z, y = price))
library(tidyverse)
ggplot(diamonds) +
geom_point(aes(x = z, y = price))
orange_trees <- read_delim("orange-trees.csv")
ggplot(orange1) +
geom_line(aes(x=age, y=circumference))
orange1 <- orange_trees %>%
filter(Tree == 1)
ggplot(orange1) +
geom_line(aes(x=age, y=circumference))
View(orange_trees)
orange_trees <- read_delim("orange-trees.csv")
orange_trees %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1)
orange_trees %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1) %>%
ggplot() +
geom_col(aes(x=Tree, y = circumference))
ggplot(d1000) +
geom_histogram(aes(x=price))
d1000 <- diamonds %>%
sample_n(1000)
ggplot(d1000) +
geom_histogram(aes(x=price))
filter(rank(desc(price))
diamonds %>%
diamonds %>%
group_by(price) %>%
filter(rank(desc(price)))
diamonds %>%
group_by(price) %>%
arrange()
diamonds %>%
group_by(price) %>%
arrange(desc(price))
diamonds %>%
group_by(price) %>%
arrange(desc(price)) %>%
head(10)
ggplot(d1000) %>%
geom_point(aes(x=carat, y=price), col = "purple4")
ggplot(d1000) +
geom_point(aes(x=carat, y=price), col = "purple4")
ggplot(d1000) +
geom_point(aes(x=carat, y=price, col = "purple4"))
orange_trees %>%
filter(Tree == 1) %>%
ggplot() +
geom_line(aes(x=age, y=circumference)) +
geom_point(aes(x=age, y=circumference))
orange_trees %>%
filter(Tree == 1) %>%
ggplot(aes(x=age, y=circumference)) +
geom_line() +
geom_point()
ggplot(d1000, aes(carat, price, col=clarity)) +
geom_point()
d1000 <- diamonds %>%
sample_n(1000)
ggplot(d1000, aes(carat, price, col=clarity)) +
geom_point()
d1000 <- diamonds %>%
sample_n(1000)
ggplot(d1000, aes(carat, price, col=clarity)) +
geom_point()
ggplot(d1000, aes(carat, price, col=price)) +
geom_point()
ggplot(d1000, aes(carat, price, col=carat)) +
geom_point()
price
ggplot(d1000, aes(carat, price, col=clarity)) +
geom_point()
diamonds %>%
select(clarity == "FL")
diamonds %>%
filter(clarity == "FL")
diamonds %>%
filter(clarity == "IF")
diamonds %>%
filter(clarity == "IF") %>%
arrange(rank(desc(price)))
diamonds %>%
filter(clarity == "IF") %>%
arrange(rank(desc(price))) %>%
head(5)
orange_trees %>%
ggplot(aes(age, circumference, col=factor(Tree))) +
geom_line()
orange %>%
ggplot(aes(age, circumference, col=Tree)) +
geom_line()
orange_trees %>%
ggplot(aes(age, circumference, col=Tree)) +
geom_line()
orange_trees %>%
ggplot(aes(age, circumference, col=factor(Tree))) +
geom_line() +
labs(x = "Age (days)", y = "Circumference (mm)",
col = "Tree #")
orange_trees %>%
ggplot(aes(age, circumference, col=factor(Tree))) +
geom_line() +
labs(x = "Age (days)", y = "Circumference (mm)",
col = "Tree #")
orange_trees %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1) %>%
ggplot() +
geom_col(aes(x=Tree, y = circumference),
col = "red")
orange_trees %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1) %>%
ggplot() +
geom_col(aes(x=Tree, y = circumference),
fill = "red")
**Fill:**
orange_trees %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1) %>%
ggplot() +
geom_col(aes(x=Tree, y = circumference),
fill = "red")
orange_trees %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1) %>%
ggplot() +
geom_col(aes(x=Tree, y = circumference),
fill = "purple4", col="gold", size=4)
orange_trees %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1) %>%
ggplot() +
geom_col(aes(x=Tree, y = circumference),
fill = "purple4", col="gold", size=2)
orange_trees %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1) %>%
ggplot() +
geom_col(aes(x=Tree, y = circumference),
fill = "purple4", col="gold", size=2)
orange_trees %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1) %>%
ggplot() +
geom_col(aes(x=Tree, y = circumference),
fill = factor("purple4"), col="gold", size=2)
orange_trees %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1) %>%
ggplot() +
geom_col(aes(x=Tree, y = circumference),
fill = factor(trees), col="gold", size=2)
orange_trees %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1) %>%
ggplot() +
geom_col(aes(x=Tree, y = circumference),
fill = factor(Tree), col="gold", size=2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
orange <- read_delim("orange-trees.csv")
orange %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1) %>%
ggplot(
aes(Tree, circumference,
fill=Tree)) +
geom_col()
orange %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1) %>%
ggplot(
aes(Tree, circumference,
fill = factor(Tree))) +
geom_col()
partySeats
partySeats <- data.frame(party = c("BJP", "INC", "AITC"),
seath = c(303, 52, 23))
partySeats
partySeats <- data.frame(party = c("BJP", "INC", "AITC"),
seats = c(303, 52, 23))
partySeats
ggplot(partySeats, aes(party, seats)) +
geom_col()
ggplot(partySeats, aes(party, seats, fill=party)) +
geom_col() +
scale_fill_manual(values = c("BJP" = "orange2", "INC" = "skyblue3", "AITC" = "springgreen3"))
c("BJP" = "orange2", "INC" = "skyblue3", "AITC" = "springgreen3")
US_PartySeats <- data.frame(party = c("Republicans", "Democrats"), seats = c(222, 213))
ggplot(US_PartySeats, aes(party, seats, fill=party)) +
geom_col() +
scale_fill_manual(values=c("Republicans" = "red", "Democrats" = "blue" ))
ggplot(US_PartySeats, aes(party, seats, fill=party)) +
geom_col() +
scale_fill_manual(values=c("Republicans" = "red", "Democrats" = "blue", "Vacancies" = "grey" ))
US_PartySeats <- data.frame(party = c("Republicans", "Democrats", "Vacancies"), seats = c(222, 212, 10))
US_PartySeats <- data.frame(party = c("Republicans", "Democrats", "Vacancies"), seats = c(222, 212, 10))
ggplot(US_PartySeats, aes(party, seats, fill=party)) +
geom_col() +
scale_fill_manual(values=c("Republicans" = "red", "Democrats" = "blue", "Vacancies" = "grey" ))
US_PartySeats <- data.frame(party = c("Republicans", "Democrats", "Vacancies"), seats = c(222, 212, 1))
ggplot(US_PartySeats, aes(party, seats, fill=party)) +
geom_col() +
scale_fill_manual(values=c("Republicans" = "red", "Democrats" = "blue", "Vacancies" = "grey" ))
orangeX
orangeX <- orange %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1)
orangeX
ggplot(orangeX, aes(Tree, circumference, col=Tree)) +
geom_col() +
scale_color_manual(values=c("1" = "black", "2" = "red", "3" = "skyblue", "4" = "purple", "5" = "gold"))
ggplot(orangeX, aes(Tree, circumference, fill()=Tree)) +
ggplot(orangeX, aes(Tree, circumference, fill=Tree)) +
geom_col() +
scale_fill_manual(values=c("1" = "black", "2" = "red", "3" = "skyblue", "4" = "purple", "5" = "gold"))
ggplot(orangeX, aes(Tree, circumference, fill=factor(Tree))) +
geom_col() +
scale_fill_manual(values=c("1" = "black", "2" = "red", "3" = "skyblue", "4" = "purple", "5" = "gold"))
knitr::opts_chunk$set(echo = TRUE)
ggplot(gdp_v_le_2019, aes(GDP_PC, lifeExpectancy, col=factor(region))) +
geom_point(aes(size = totalPopulation/1000000),
na.rm = TRUE) +
labs(title = "GDP per capita vs Life Expectancy by Country in 2019",
x="GDP per capita (USD)",
y="Life Expectancy (Years)",
col = "Continents",
size = "Total Population (Millions)")
gdp_v_le_2019 <- population_data %>%
select(name, region, GDP_PC, lifeExpectancy, time, totalPopulation) %>%
filter(!is.na(name), !is.na(GDP_PC), !is.na(totalPopulation), !name=="",
time %in% c("2019")) %>%
group_by(name, time)
population_data <- read.delim("gapminder.csv")
gdp_v_le_2019 <- population_data %>%
select(name, region, GDP_PC, lifeExpectancy, time, totalPopulation) %>%
filter(!is.na(name), !is.na(GDP_PC), !is.na(totalPopulation), !name=="",
time %in% c("2019")) %>%
group_by(name, time)
ggplot(gdp_v_le_2019, aes(GDP_PC, lifeExpectancy, col=factor(region))) +
geom_point(aes(size = totalPopulation/1000000),
na.rm = TRUE) +
labs(title = "GDP per capita vs Life Expectancy by Country in 2019",
x="GDP per capita (USD)",
y="Life Expectancy (Years)",
col = "Continents",
size = "Total Population (Millions)")
knitr::opts_chunk$set(echo = TRUE)
orange_trees %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1) %>%
ggplot() +
geom_col(aes(x=Tree, y = circumference),
fill = "purple4", col="gold", size=2)
orange_trees %>%
group_by(Tree) %>%
filter(rank(desc(age)) == 1) %>%
ggplot() +
geom_col(aes(x=Tree, y = circumference),
fill = "red")
ggplot(orangeX, aes(Tree, circumference, fill=factor(Tree))) +
geom_col() +
scale_fill_manual(values=c("1" = "black", "2" = "red", "3" = "skyblue", "4" = "purple", "5" = "gold"))
nz <- data.frame(x = c(0, 2, 5, 5,  # south island
6, 10, 8, 7, 7, 6),  # north island
y = c(1, 0, 3, 6,  # south island
4, 8, 8, 12, 8, 7))  # north island
nz
ggplot(nz, aes(x, y)) +
geom_point()
ggplot(nz, aes(x, y)) +
geom_line()
ggplot(nz, aes(x, y)) +
geom_point() +
geom_polygon(fill=NA, col="black")
nz$group <- c("south", "south", "south", "south",
"north", "north", "north", "north", "north", "north")
nz
ggplot(nz, aes(x, y, group=group)) +
geom_point() +
geom_polygon(fill=NA, col="black")
ggplot(nz, aes(x, y, group=group)) +
geom_point() +
geom_polygon(fill="seagreen3", col="black") +
coord_quickmap()
ggplot(nz, aes(x, y, group=group)) +
geom_point() +
geom_polygon(fill="seagreen3", col="black")
+
coord_quickmap()
ggplot(nz, aes(x, y, group=group)) +
geom_point() +
geom_polygon(fill="seagreen3", col="black") +
coord_quickmap()
nz$temp <- c(20,20,20,20,
30,30,30,30,30,30)
nz
ggplot(nz, aes(x, y, group=group, fill=temp)) +
geom_point() +
geom_polygon(, col="black") +
coord_quickmap()
ggplot(nz, aes(x, y, group=group, fill=temp)) +
geom_point() +
geom_polygon(col="black") +
coord_quickmap()
ggplot(nz, aes(x, y, group=group, fill=temp)) +
geom_polygon(col="black") +
coord_quickmap()
ggplot(nz, aes(x, y, group=group, fill=temp)) +
geom_polygon(col="black") +
coord_quickmap()
ggplot(nz, aes(x, y, group=group, fill=factor(temp))) +
geom_polygon(col="black") +
coord_quickmap()
install.packages("maps")
map_data()
map_data()
install.packages("maps")
install.packages("maps")
knitr::opts_chunk$set(echo = TRUE)
map_data()
nz <- map_data("nz")
?map_data()
nz <- map_data("nz")
install.packages("maps")
nz <- map_data("nz")
nz <- map_data("nz")
install.packages("maps")
nz <- map_data("nz")
head(nz)
dim(nz)
```{r}
ggplot(nz, aes(long, lat, group=group)) +
geom_polygon(fill="seagreen3", col="white") +
coord_quickmap()
ggplot(nz, aes(long, lat, group=group)) +
geom_polygon(fill="seagreen3", col="white") +
coord_quickmap()
ggplot(nz, aes(long, lat, group=group)) +
geom_polygon(fill="seagreen3", col="white") +
coord_quickmap()
library(tidyverse)
ggplot(nz, aes(long, lat, group=group)) +
geom_polygon(fill="seagreen3", col="white") +
coord_quickmap()
nz <- map_data("nz")
head(nz)
dim(nz)
ggplot(nz, aes(long, lat, group=group)) +
geom_polygon(fill="seagreen3", col="white") +
coord_quickmap()
nz %>%
summarize(regions = n_distinct(region),
groups = n_distinct(group))
access <- runif(22)
access
accesses
accesses <- data.frame(access = access, province = 1:22)
accesses
nzAccess <- merge(nz, accesses, by.x = "group", by.y = "province")
nzAccess
nzAccess %>%
head()
coord_quickmap()
coord_quickmap()
ggplot(nzAccess, aes(long, lat, fill=access)) +
geom_polygon(col = "white", size=0.3) +
coord_quickmap()
ggplot(nzAccess, aes(long, lat, fill=access)) +
geom_polygon(col = "white", size=0.3) +
coord_quickmap()
ggplot(nzAccess, aes(long, lat, group=group, fill=access)) +
geom_polygon(col = "white", size=0.3) +
coord_quickmap()
shiny::runApp('Desktop/INFO 201/ps6-shiny/ps6_problem_set')
runApp('Desktop/INFO 201/ps6-shiny/ps6_problem_set')
runApp('Desktop/INFO 201/ps6-shiny/ps6_problem_set')
runApp('Desktop/INFO 201/Info201-Group4/Shopping-n-SocialMedia')
runApp('Desktop/INFO 201/Info201-Group4/Shopping-n-SocialMedia')
runApp('Desktop/INFO 201/Info201-Group4/Shopping-n-SocialMedia')
## LOADING DATA
data <- read_delim("WhatsgoodlyData-6.csv")
setwd("~/Desktop/INFO 201/Info201-Group4/Shopping-n-SocialMedia")
## LOADING DATA
data <- read_delim("WhatsgoodlyData-6.csv")
View(data)
runApp()
runApp()
runApp()
